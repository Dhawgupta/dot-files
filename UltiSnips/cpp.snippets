snippet zxc "CP_Snippet"
#include <bits/stdc++.h>

using namespace std;

using LL = long long;
template<class T> using min_heap = priority_queue<T, std::vector<T>, std::greater<T>>;
using LD = long double;

#define ALL(v) v.begin(), v.end()
#define en(v) *(--v.end())
#define endl '\n'
#define SYNC ios_base::sync_with_stdio(false); cin.tie(NULL); cerr.tie(NULL);
#define her     cerr << "here\n" 
#define un(x) x.erase(unique(ALL(x)), x.end())

template<class TH> void _dbg(const char *sdbg, TH h){cerr<<sdbg<<"="<<h<<"\n";}
template<class TH, class... TA> void _dbg(const char *sdbg, TH h, TA... a) {
	while(*sdbg!=','){cerr<<*sdbg++;} cerr<<"="<<h<<","; _dbg(sdbg+1, a...);
}

#ifdef aishwarya_tandon_is_the_best
#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)
#else
#define debug(...) (__VA_ARGS__)
#define cerr if(0)cout
#endif

int32_t main() { SYNC
  $1

  cerr << "Time elapsed :" << clock() * 1000.0 / CLOCKS_PER_SEC << " ms" << '\n';
  return 0;
}
endsnippet

snippet comp "Final Competitive Template"
#include <bits/stdc++.h>

using namespace std;
#define endl '\n'

int32_t main () {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);


  return 0;
}
endsnippet

snippet zxcv "GCJ Template"
#include <bits/stdc++.h>

using namespace std;

using LL = long long;
template<typename T> using V = vector<T>; 
template<typename T, typename S> using P = pair<T, S>; 
template<class T> using min_heap = priority_queue<T, std::vector<T>, std::greater<T>>;
using LD = long double;

#define ALL(v) v.begin(), v.end()
#define en(v) *(--v.end())
#define endl '\n'
#define SYNC ios_base::sync_with_stdio(false); cin.tie(NULL); cerr.tie(NULL);
#define REP(i, n) for(int i = 0; i < (int)n ;i++)
#define REPN(i, n) for(int i = 1; i <= (int)n ; i++)
#define her     cerr << "here\n" 
#define pp push_back
#define fi first 
#define se second
#define un(x) x.erase(unique(ALL(x)), x.end())

template<class TH> void _dbg(const char *sdbg, TH h){cerr<<sdbg<<"="<<h<<"\n";}
template<class TH, class... TA> void _dbg(const char *sdbg, TH h, TA... a) {
  while(*sdbg!=','){cerr<<*sdbg++;} cerr<<"="<<h<<","; _dbg(sdbg+1, a...);
}

#ifdef aishwarya_tandon_is_the_best
#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)
#else
#define debug(...) (__VA_ARGS__)
#define cerr if(0)cout
#endif

int32_t main() { SYNC
  int caseNo = 1;
  int T;
  cin >> T;
  while(T--) {
    cout << "Case #" << caseNo++ << ": ";
    $1
  }
  cerr << "Time elapsed :" << clock() * 1000.0 / CLOCKS_PER_SEC << " ms" << '\n';
  return 0;
}
endsnippet

snippet ran "random_number_generator"
auto seed = chrono::system_clock().now().time_since_epoch().count();
random_device rd;
mt19937 gen(rd()); // mersenne twister (only for 32 bit unsigned numbers)
uniform_int_distribution<int> dis(1, 10000); // dis(L, R) uniformly generates [L, R] (inclusive)
endsnippet

snippet pow "power(a, b)"
int power(int a, int b) {
  int ans = 1;
  for (; b > 0; b >>= 1) {
    if (b & 1) ans = multiply(ans, a);
    a = multiply(a, a);
  }
  return ans;
}
endsnippet

snippet varMult "multiplication_variadic"
int add(){ return 0; }

template<typename... T> int add(int a, T... arg){
  int b = add(arg...);
  int ans = a + b;
  if (ans >= MOD)
    ans -= MOD;
  return ans;
}

int multiply(){return 1;}

template<typename... Args> int multiply(int a, Args... arg){
  return (a * 1LL * multiply(arg...)) % MOD;
}
endsnippet

snippet modMultiplyBinary "BinaryModularFinding"
using __int = unsigned long long;
__int mulmod(__int a, __int b, __int MOD) {
  __int ans = 0;
  if(a >= MOD) a %= MOD;
  if(b >= MOD) b %= MOD;
  while(b) {
    if(b & 1) ans = (ans + a) % MOD;
    a = (a * 2LL ) % MOD;
    b >>= 1;
  }
  return ans;
}
endsnippet
